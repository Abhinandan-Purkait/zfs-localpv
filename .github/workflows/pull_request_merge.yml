name: Pull Request Merge CI

on:
  pull_request:
    paths-ignore:
      - 'docs/**'
      - 'design/**'
      - 'changelogs/**'
      - '*.md'
      - 'MAINTAINERS'
    branches:
      - develop
      - 'release/[0-9]+.[0-9]+'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Shellcheck
        uses: reviewdog/action-shellcheck@v1
        with:
          github_token: ${{ secrets.github_token }}
          reporter: github-pr-review
          path: '.'
          pattern: '*.sh'
          
      - uses: cachix/install-nix-action@v22
      - name: Check if the chart follows a valid semver version
        run: |
          export NIX_PATH=nixpkgs=$(jq '.nixpkgs.url' scripts/nix/sources.json -r)
          echo "NIX_PATH=$NIX_PATH" >> $GITHUB_ENV
          branch_name="${{ github.ref_name }}"
          nix-shell --pure --run "./scripts/validate-version.sh --branch $branch_name" ./scripts/shell.nix

      - name: Run chart-testing (list-changed)
        id: list-changed
        run: |
          changed=$(nix-shell --pure --run "ct list-changed --config ct.yaml" ./scripts/shell.nix)
          if [[ -n "$changed" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          fi
  
      - name: Run chart-testing (lint)
        run: nix-shell --pure --run "ct lint --config ct.yaml" ./scripts/shell.nix

  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Unit test
        run: make test

      - name: Upload Coverage Report
        uses: codecov/codecov-action@v4  
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.txt
          name: coverage-$(date +%s)
          flags: unittests

  bdd-tests:
    runs-on: ubuntu-latest
    needs: ['unit-tests']
    strategy:
      fail-fast: true
      matrix:
        kubernetes: [v1.27.3]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go 1.19
        uses: actions/setup-go@v4
        with:
          go-version: 1.19.9
          cache: false
        
      - name: Build images locally
        run: make zfs-driver-image || exit 1;

      - name: Setup zfs pools
        run: |
          sudo apt-get install -y zfsutils-linux
          truncate -s 100G /tmp/disk.img
          sudo zpool create zfspv-pool `sudo losetup -f /tmp/disk.img --show`

      - name: Setup Minikube-Kubernetes
        uses: medyagh/setup-minikube@latest
        with:
          cache: false
          minikube-version: 1.31.1
          driver: none
          kubernetes-version: ${{ matrix.kubernetes }}
          cni: calico
          start-args: '--install-addons=false'

      - name: Setting environment variables
        run: |
          echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV
          echo "OPENEBS_NAMESPACE=openebs" >> $GITHUB_ENV

      - name: bootstrap
        run: make bootstrap

      - name: Running tests
        run: |
          make ci
          make sanity 
      
      - name: Upload CI Test Coverage Report
        uses: codecov/codecov-action@v4  
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./tests/bdd_coverage.txt
          name: coverage-bdd_coverage-$(date +%s)
          flags: bddtests

  csi-driver:
    runs-on: ubuntu-latest
    #needs: ['lint', 'bdd-tests']
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Image Org
        run: |
            [ -z "${{ secrets.IMAGE_ORG }}" ] && IMAGE_ORG=openebs || IMAGE_ORG=${{ secrets.IMAGE_ORG}}
            echo "IMAGE_ORG=${IMAGE_ORG}" >> $GITHUB_ENV

      - uses: cachix/install-nix-action@v22
      - name: Set Tag
        run: |
            export NIX_PATH=nixpkgs=$(jq '.nixpkgs.url' scripts/nix/sources.json -r)
            echo "NIX_PATH=$NIX_PATH" >> $GITHUB_ENV
            echo "BRANCH=${{ github.ref_name }}" >> $GITHUB_ENV
            echo "TAG=$(nix-shell --pure --run "yq e '.version' deploy/helm/charts.Chart.yaml" ./scripts/shell.nix)" >> GITHUB_ENV

      - name: Set Build Date
        id: date
        run: |
            echo "DATE=$(date -u +'%Y-%m-%dT%H:%M:%S%Z')" >> $GITHUB_OUTPUT
      
      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
            # add each registry to which the image needs to be pushed here
            # quay.io/${{ env.IMAGE_ORG }}/zfs-driver
            # ghcr.io/${{ env.IMAGE_ORG }}/zfs-driver
            images: |
              ${{ env.IMAGE_ORG }}/zfs-driver
            tags: |
              type=raw,value=latest,enable=false
              type=raw,value=${{ env.TAG }}
        
      - name: Print Tag info
        run: |
            echo "BRANCH: ${BRANCH}"
            echo "${{ steps.docker_meta.outputs.tags }}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
            platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
            version: v0.13.1
  
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

      # - name: Login to Quay
      #   uses: docker/login-action@v3
      #   with:
      #       registry: quay.io
      #       username: ${{ secrets.QUAY_USERNAME }}
      #       password: ${{ secrets.QUAY_TOKEN }}

      # - name: Login to GHCR
      #   uses: docker/login-action@v3
      #   with:
      #       registry: ghcr.io
      #       username: ${{ github.actor }}
      #       password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push Image
        uses: docker/build-push-action@v5
        with:
            context: .
            file: ./buildscripts/zfs-driver/zfs-driver.Dockerfile
            push: true
            platforms: linux/amd64, linux/arm64
            tags: |
              ${{ steps.docker_meta.outputs.tags }}
              build-args: |
              DBUILD_DATE=${{ steps.date.outputs.DATE }}
              DBUILD_REPO_URL=https://github.com/openebs/zfs-localpv
              DBUILD_SITE_URL=https://openebs.io
              BRANCH=${{ env.BRANCH }}
